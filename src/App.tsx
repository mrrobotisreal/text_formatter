import { type FC, useState, useRef, useEffect } from 'react';
import TopNav from '@/components/top-nav';

const LinkedInTextFormatter: FC = () => {
  const [text, setText] = useState('');
  const [selectionStart, setSelectionStart] = useState(0);
  const [selectionEnd, setSelectionEnd] = useState(0);
  const [copySuccess, setCopySuccess] = useState('');
  const textAreaRef = useRef<HTMLTextAreaElement>(null);

  const handleSelect = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setSelectionStart(e.target.selectionStart);
    setSelectionEnd(e.target.selectionEnd);
  };

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setText(e.target.value);
  };

  useEffect(() => {
    if (copySuccess) {
      const timer = setTimeout(() => {
        setCopySuccess('');
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, [copySuccess]);

  const formatText = (formatter: (text: string) => string) => {
    if (selectionStart === selectionEnd) return;

    const selectedText = text.substring(selectionStart, selectionEnd);
    const formattedText = formatter(selectedText);

    const newText =
      text.substring(0, selectionStart) +
      formattedText +
      text.substring(selectionEnd);

    setText(newText);

    setTimeout(() => {
      if (textAreaRef.current) {
        textAreaRef.current.focus();
        textAreaRef.current.setSelectionRange(
          selectionStart,
          selectionStart + formattedText.length
        );
      }
    }, 0);
  };

  const boldText = (text: string) => {
    const boldMap = {
      'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥', 'h': 'ùóµ', 'i': 'ùó∂',
      'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª', 'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø',
      's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ', 'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá',
      'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö', 'H': 'ùóõ', 'I': 'ùóú',
      'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°', 'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•',
      'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®', 'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
      '0': 'ùü¨', '1': 'ùü≠', '2': 'ùüÆ', '3': 'ùüØ', '4': 'ùü∞', '5': 'ùü±', '6': 'ùü≤', '7': 'ùü≥', '8': 'ùü¥', '9': 'ùüµ'
    };
    return text.split('').map((char: string) => boldMap[char as keyof typeof boldMap] || char).join('');
  };

  const italicText = (text: string) => {
    const italicMap = {
      'a': 'ùò¢', 'b': 'ùò£', 'c': 'ùò§', 'd': 'ùò•', 'e': 'ùò¶', 'f': 'ùòß', 'g': 'ùò®', 'h': 'ùò©', 'i': 'ùò™',
      'j': 'ùò´', 'k': 'ùò¨', 'l': 'ùò≠', 'm': 'ùòÆ', 'n': 'ùòØ', 'o': 'ùò∞', 'p': 'ùò±', 'q': 'ùò≤', 'r': 'ùò≥',
      's': 'ùò¥', 't': 'ùòµ', 'u': 'ùò∂', 'v': 'ùò∑', 'w': 'ùò∏', 'x': 'ùòπ', 'y': 'ùò∫', 'z': 'ùòª',
      'A': 'ùòà', 'B': 'ùòâ', 'C': 'ùòä', 'D': 'ùòã', 'E': 'ùòå', 'F': 'ùòç', 'G': 'ùòé', 'H': 'ùòè', 'I': 'ùòê',
      'J': 'ùòë', 'K': 'ùòí', 'L': 'ùòì', 'M': 'ùòî', 'N': 'ùòï', 'O': 'ùòñ', 'P': 'ùòó', 'Q': 'ùòò', 'R': 'ùòô',
      'S': 'ùòö', 'T': 'ùòõ', 'U': 'ùòú', 'V': 'ùòù', 'W': 'ùòû', 'X': 'ùòü', 'Y': 'ùò†', 'Z': 'ùò°'
    };
    return text.split('').map((char: string) => italicMap[char as keyof typeof italicMap] || char).join('');
  };

  const monospaceText = (text: string) => {
    const monospaceMap = {
      'a': 'ùöä', 'b': 'ùöã', 'c': 'ùöå', 'd': 'ùöç', 'e': 'ùöé', 'f': 'ùöè', 'g': 'ùöê', 'h': 'ùöë', 'i': 'ùöí',
      'j': 'ùöì', 'k': 'ùöî', 'l': 'ùöï', 'm': 'ùöñ', 'n': 'ùöó', 'o': 'ùöò', 'p': 'ùöô', 'q': 'ùöö', 'r': 'ùöõ',
      's': 'ùöú', 't': 'ùöù', 'u': 'ùöû', 'v': 'ùöü', 'w': 'ùö†', 'x': 'ùö°', 'y': 'ùö¢', 'z': 'ùö£',
      'A': 'ùô∞', 'B': 'ùô±', 'C': 'ùô≤', 'D': 'ùô≥', 'E': 'ùô¥', 'F': 'ùôµ', 'G': 'ùô∂', 'H': 'ùô∑', 'I': 'ùô∏',
      'J': 'ùôπ', 'K': 'ùô∫', 'L': 'ùôª', 'M': 'ùôº', 'N': 'ùôΩ', 'O': 'ùôæ', 'P': 'ùôø', 'Q': 'ùöÄ', 'R': 'ùöÅ',
      'S': 'ùöÇ', 'T': 'ùöÉ', 'U': 'ùöÑ', 'V': 'ùöÖ', 'W': 'ùöÜ', 'X': 'ùöá', 'Y': 'ùöà', 'Z': 'ùöâ',
      '0': 'ùü∂', '1': 'ùü∑', '2': 'ùü∏', '3': 'ùüπ', '4': 'ùü∫', '5': 'ùüª', '6': 'ùüº', '7': 'ùüΩ', '8': 'ùüæ', '9': 'ùüø'
    };
    return text.split('').map((char: string) => monospaceMap[char as keyof typeof monospaceMap] || char).join('');
  };

  const strikethroughText = (text: string) => {
    return text.split('').map((char: string) => char + '\u0336').join('');
  };

  const underlineText = (text: string) => {
    return text.split('').map((char: string) => char + '\u0332').join('');
  };

  const getIndentationLevel = (line: string) => {
    const match = line.match(/^(\s+)/);
    if (!match) return 0;
    return Math.floor(match[1].length / 2);
  };

  const bulletList = (text: string) => {
    const lines = text.split('\n');
    return lines.map((line: string) => {
      if (!line.trim()) return line;

      const level = getIndentationLevel(line);
      const trimmedLine = line.trimStart();
      const bulletSymbols = ['‚Ä¢', '‚ó¶', '‚ñ™', '‚ñ´', '‚óÜ'];
      const bulletSymbol = bulletSymbols[Math.min(level, bulletSymbols.length - 1)];

      const indentation = '  '.repeat(level);
      return `${indentation}${bulletSymbol} ${trimmedLine}`;
    }).join('\n');
  };

  const numberedList = (text: string) => {
    const lines = text.split('\n');
    const counters = [0, 0, 0, 0, 0];

    return lines.map((line: string) => {
      if (!line.trim()) return line;

      const level = getIndentationLevel(line);
      const trimmedLine = line.trimStart();

      for (let i = level + 1; i < counters.length; i++) {
        counters[i] = 0;
      }

      counters[level]++;

      let prefix: string;
      if (level === 0) {
        prefix = `${counters[level]}.`;
      } else if (level === 1) {
        prefix = `${String.fromCharCode(96 + counters[level])}.`;
      } else if (level === 2) {
        prefix = `${String.fromCharCode(8544 + counters[level] - 1)}.`;
      } else {
        prefix = `${String.fromCharCode(8226)}`;
      }

      const indentation = '  '.repeat(level);
      return `${indentation}${prefix} ${trimmedLine}`;
    }).join('\n');
  };

  const indentText = (text: string, indent: boolean = true) => {
    const lines = text.split('\n');
    return lines.map((line: string) => {
      if (!line.trim()) return line;
      if (indent) {
        return '  ' + line;
      } else {
        if (line.startsWith('  ')) {
          return line.substring(2);
        }
        return line;
      }
    }).join('\n');
  };

  const copyToClipboard = () => {
    if (navigator.clipboard && window.isSecureContext) {
      navigator.clipboard.writeText(text).then(() => {
        setCopySuccess('Text copied to clipboard!');
      });
    } else {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      try {
        document.execCommand('copy');
        setCopySuccess('Text copied to clipboard!');
      } catch (err) {
        setCopySuccess('Failed to copy text');
        console.error('Failed to copy: ', err);
      }

      document.body.removeChild(textArea);
    }
  };

  return (
    <>
    <TopNav />
    <div className="flex flex-col p-6 max-w-4xl mx-auto">
      <p className="mb-4">Select text and apply formatting that works when pasted into LinkedIn, Twitter, Facebook, etc.</p>

      <div className="mb-4">
        <textarea
          ref={textAreaRef}
          className="w-full p-3 border border-gray-300 rounded-md h-64 font-sans"
          value={text}
          onChange={handleTextChange}
          onSelect={handleSelect}
          placeholder="Type or paste your text here..."
        />
      </div>

      <div className="mb-4 flex flex-wrap gap-2">
        <button
          onClick={() => formatText(boldText)}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 font-bold"
        >
          Bold
        </button>
        <button
          onClick={() => formatText(italicText)}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 italic"
        >
          Italic
        </button>
        <button
          onClick={() => formatText(monospaceText)}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 font-mono"
        >
          Monospace
        </button>
        <button
          onClick={() => formatText(strikethroughText)}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 line-through"
        >
          Strikethrough
        </button>
        <button
          onClick={() => formatText(underlineText)}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 underline"
        >
          Underline
        </button>
        <button
          onClick={() => formatText(bulletList)}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          ‚Ä¢ Bullet List
        </button>
        <button
          onClick={() => formatText(numberedList)}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          1. Numbered List
        </button>
        <button
          onClick={() => formatText((text: string) => indentText(text, true))}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Indent ‚Üí
        </button>
        <button
          onClick={() => formatText((text: string) => indentText(text, false))}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          ‚Üê Unindent
        </button>
      </div>

      <div className="mb-4">
        <button
          onClick={copyToClipboard}
          className="px-6 py-3 bg-green-600 text-white rounded-md hover:bg-green-700 font-bold"
        >
          Copy Formatted Text
        </button>
        {copySuccess && (
          <span className="ml-4 text-green-600">{copySuccess}</span>
        )}
      </div>

      <div className="mt-8 border-t pt-4">
        <h2 className="text-xl font-semibold mb-2">How it works</h2>
        <p className="mb-2">This formatter doesn&apos;t use HTML or markdown. Instead, it uses special Unicode characters that visually appear formatted. This is why the formatting persists when pasted into platforms that don&apos;t support HTML formatting.</p>

        <h3 className="text-lg font-semibold mt-4 mb-2">Nested Lists Guide</h3>
        <p className="mb-2">To create nested lists:</p>
        <ol className="list-decimal pl-6 mb-4">
          <li>Create a normal list (bullet or numbered)</li>
          <li>Select the lines you want to nest</li>
          <li>Click the "Indent ‚Üí" button to nest them</li>
          <li>Bullet lists will automatically use different bullet styles for each level: ‚Ä¢ ‚Üí ‚ó¶ ‚Üí ‚ñ™</li>
          <li>Numbered lists will automatically use different numbering styles: 1. ‚Üí a. ‚Üí i.</li>
        </ol>

        <p>You can create up to 3 levels of nesting for the best results on social media platforms.</p>
      </div>
    </div>
    </>
  );
};

export default LinkedInTextFormatter;
